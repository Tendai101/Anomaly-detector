realtime_voltage_usage_anomaly_detector.py

The code simulates real-time voltage readings and detects anomalies using a Z-Score-based method. It begins by importing necessary libraries, including NumPy for numerical operations, random for generating fluctuations, Matplotlib for visualization, and deque for managing a fixed-size window of recent readings. The is_anomaly function calculates the Z-Score of the latest voltage reading against a rolling mean and standard deviation of the last specified number of readings, returning `True` if the reading is classified as an anomaly based on a defined threshold. The simulate_voltage_stream function generates voltage data for a specified duration, introducing random fluctuations around a normal voltage and occasionally adding anomalies based on a defined probability and magnitude. The real_time_line_plot_with_anomalies function then visualizes the voltage data in real-time using an interactive plot, updating the graph with each new reading and highlighting any detected anomalies with annotations. The main execution block initiates the voltage monitoring for a 30-second duration, providing a clear view of voltage fluctuations and any irregularities in real time.

365day_power_usage_anomaly_detector.py

The code simulates voltage readings from a generator over a year (365 days) and employs a Z-Score-based method to detect anomalies within those readings. It starts by importing necessary libraries, including NumPy for numerical calculations, random for generating fluctuations and anomalies, and Matplotlib for visualization. The is_anomaly function checks whether the latest voltage reading is an anomaly by calculating the Z-Score based on the rolling mean and standard deviation of the last specified number of readings (default is 30). If there arenâ€™t enough readings, it returns False. If enough data is present, it computes the Z-Score for the latest reading and returns `True` if the absolute Z-Score exceeds a defined threshold (default is 2). The simulate_voltage_stream function generates voltage readings that fluctuate around a normal value (230V) and randomly introduces anomalies. Finally, the scatter_plot_voltages function visualizes the readings and detected anomalies in a scatter plot, counting and displaying the total number of anomalies detected. The main execution block runs the simulation and produces the plot, enabling users to observe voltage behavior and identify any irregularities over the simulated year.

Linear regression and perceptrons are both effective methods for anomaly detection, each with its unique strengths. Linear regression fits a model to data by identifying the best-fit line that describes the relationship between independent variables and a dependent variable. It analyzes residuals (differences between actual and predicted values) to flag anomalies, as significant deviations from the expected linear relationship indicate unusual behavior. Its simplicity, interpretability, and efficiency make linear regression a strong choice, especially for datasets exhibiting linear trends. On the other hand, perceptrons, which are foundational to neural networks, can handle more complex, non-linear relationships. A perceptron uses activation functions to map inputs to outputs, allowing it to model intricate patterns within the data. When trained on labeled data, a perceptron can learn to classify instances as normal or anomalous, making it particularly useful in high-dimensional spaces where linear regression might struggle. By leveraging both methods, one can effectively combine the interpretability of linear regression with the adaptive learning capabilities of perceptrons, providing a robust framework for anomaly detection in a wide variety of applications. I have carried out activities on such models (shown in my GitHub @Tendai101).

Resources used:
https://flexiple.com/python/z-score-python
https://matplotlib.org/
GeeksforGeeks
ChatGpt and bolt debugging assistance

